name: Build & deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Check"]
    types:
      - completed

defaults:
  run:
    shell: bash

jobs:
  binaries:
    name: Build binaries
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macos-latest"]

    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2

      - name: Install configure.py dependencies
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # imagemagick is preinstalled
            pip install tomlkit httpx
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt update
            sudo apt install -y python3 python3-tomlkit python3-httpx imagemagick
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install imagemagick
            pip install tomlkit httpx
          fi

      - name: Set environment variables
        run: |
          # LAUNCHER_NAME, DATA_LAUNCHER_NAME and VERSION are used by CI script
          if [ -n "${{ vars.LAUNCHER_NAME }}" ]; then
            export LAUNCHER_NAME="${{ vars.LAUNCHER_NAME }}"
          else
            export "$(cat build.env | grep 'LAUNCHER_NAME=')"
            if [ -z "$LAUNCHER_NAME" ]; then
              echo "LAUNCHER_NAME not set"
              exit 1
            fi
          fi
          echo "LAUNCHER_NAME=$LAUNCHER_NAME" >> $GITHUB_ENV
          DATA_LAUNCHER_NAME=$(echo "$LAUNCHER_NAME" | tr '[:upper:]' '[:lower:]' | tr -d "'" | tr ' ' '_')
          echo "DATA_LAUNCHER_NAME=$DATA_LAUNCHER_NAME" >> $GITHUB_ENV
          echo "VERSION=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Build the launcher
        env:
          VERSION_MANIFEST_URL: ${{ vars.VERSION_MANIFEST_URL }}
          AUTO_UPDATE_BASE: ${{ vars.AUTO_UPDATE_BASE }}
          LAUNCHER_APP_ID: ${{ vars.LAUNCHER_APP_ID }}
          LAUNCHER_ICON: ${{ vars.LAUNCHER_ICON }}
          LAUNCHER_DESCRIPTION: ${{ vars.LAUNCHER_DESCRIPTION }}
          LAUNCHER_KEYWORDS: ${{ vars.LAUNCHER_KEYWORDS }}
          GPG_PUBLIC_KEY: ${{ vars.GPG_PUBLIC_KEY }}
        run: |
          python packaging/configure.py
          mkdir -p build
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cargo build --bin launcher --profile release-lto
            mv "target/release-lto/launcher.exe" "build/${LAUNCHER_NAME}.exe"
            echo "$VERSION" > build/version_windows.txt
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cargo build --bin launcher --profile release-lto
            mv "target/release-lto/launcher" "build/${DATA_LAUNCHER_NAME}"
            echo "$VERSION" > build/version_linux.txt
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            which cargo-bundle || cargo install cargo-bundle
            rustup target add x86_64-apple-darwin aarch64-apple-darwin

            # Build Intel binary directly (with older deployment target)
            export MACOSX_DEPLOYMENT_TARGET=10.12
            cargo build --bin launcher --profile release-lto --target x86_64-apple-darwin

            # Build ARM binary as part of bundle (with newer deployment target)
            export MACOSX_DEPLOYMENT_TARGET=11.0
            cargo bundle --package launcher --bin launcher --profile release-lto --target aarch64-apple-darwin

            mkdir -p app
            mv "target/aarch64-apple-darwin/release-lto/bundle/osx/$LAUNCHER_NAME.app" "app/$LAUNCHER_NAME.app"

            # Update permission descriptions (required for simple voice chat and some other mods)
            plutil -replace NSCameraUsageDescription \
              -string "A Minecraft mod wants to access your camera." \
              "app/$LAUNCHER_NAME.app/Contents/Info.plist"
            plutil -replace NSMicrophoneUsageDescription \
              -string "A Minecraft mod wants to access your microphone." \
              "app/$LAUNCHER_NAME.app/Contents/Info.plist"
            plutil -insert NSEnableAutomaticCustomizeTouchBarMenuItem \
              -bool false \
              "app/$LAUNCHER_NAME.app/Contents/Info.plist"
            plutil -insert NSFunctionBarAPIEnabled \
              -bool false \
              "app/$LAUNCHER_NAME.app/Contents/Info.plist"

            # Create universal binary
            lipo -create -output "app/$LAUNCHER_NAME.app/Contents/MacOS/launcher" \
              "target/x86_64-apple-darwin/release-lto/launcher" \
              "app/$LAUNCHER_NAME.app/Contents/MacOS/launcher"

            codesign --force --deep --sign - "app/$LAUNCHER_NAME.app"

            ln -s /Applications app/Applications

            DMG_FILENAME="${LAUNCHER_NAME}.dmg"

            # CI runner sometimes fails with "hdiutil: create failed - Resource busy", so retry a few times
            retry=0
            max_retries=5
            until [ $retry -ge $max_retries ]
            do
              hdiutil create "$DMG_FILENAME" -ov -volname "$LAUNCHER_NAME" -fs HFS+ -srcfolder "app/" && break
              retry=$((retry+1))
              echo "Retrying hdiutil create... ($retry/$max_retries)"
              sleep 5
            done

            mv "$DMG_FILENAME" build/

            mv "app/$LAUNCHER_NAME.app" "app/update.app"
            tar -czvf "build/${DATA_LAUNCHER_NAME}_macos.tar.gz" -C app "update.app"

            echo "$VERSION" > build/version_macos.txt
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: launcher-${{ matrix.os }}
          path: build/*

  flatpak:
    name: Build Flatpak package
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    container:
      image: ghcr.io/andyholmes/flatter/freedesktop:24.08
      options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Install configure.py dependencies
        run: dnf install -y python3 python3-tomlkit python3-httpx ImageMagick

      - name: Install flatpak-cargo-generator dependencies
        run: dnf install -y python3-aiohttp python3-toml wget
      - name: Run flatpak-cargo-generator
        run: |
          wget -O packaging/flatpak/flatpak-cargo-generator.py https://raw.githubusercontent.com/flatpak/flatpak-builder-tools/a1eb29c5f3038413ffafd4fea34e62c361c109ad/cargo/flatpak-cargo-generator.py
          python packaging/flatpak/flatpak-cargo-generator.py Cargo.lock -o packaging/flatpak/cargo-sources.json

      - name: Generate manifest
        env:
          VERSION: ${{ github.sha }}
          LAUNCHER_NAME: ${{ vars.LAUNCHER_NAME }}
          VERSION_MANIFEST_URL: ${{ vars.VERSION_MANIFEST_URL }}
          AUTO_UPDATE_BASE: ${{ vars.AUTO_UPDATE_BASE }}
          LAUNCHER_APP_ID: ${{ vars.LAUNCHER_APP_ID }}
          LAUNCHER_ICON: ${{ vars.LAUNCHER_ICON }}
          LAUNCHER_DESCRIPTION: ${{ vars.LAUNCHER_DESCRIPTION }}
          LAUNCHER_KEYWORDS: ${{ vars.LAUNCHER_KEYWORDS }}
          GPG_PUBLIC_KEY: ${{ vars.GPG_PUBLIC_KEY }}
        run: |
          python packaging/configure.py
          cd packaging/flatpak
          python generate.py

      - name: Setup GPG
        env:
          # kostyl, because `if` doesn't work with secrets for some reason
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        if: ${{ github.ref == 'refs/heads/master' && env.GPG_PRIVATE_KEY }}
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Install Rust SDK
        # idk how to do it better
        run: flatpak install runtime/org.freedesktop.Sdk.Extension.rust-stable/x86_64/24.08 --noninteractive

      - name: Build Flatpak package
        id: flatpak
        uses: andyholmes/flatter@main
        with:
          files: |
            packaging/flatpak/manifest.yml
          arch: x86_64
          gpg-sign: ${{ steps.gpg.outputs.fingerprint }}
          upload-bundles: true

  release:
    name: Create Release Draft
    runs-on: ubuntu-latest
    needs: [binaries, flatpak]
    if: github.ref == 'refs/heads/master' && (github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: find artifacts -type f

      - name: Get short SHA
        id: sha
        run: echo "short_sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_id }}
          name: Build from commit ${{ steps.sha.outputs.short_sha }}
          body: "Automated build from workflow run #${{ github.run_id }}."
          draft: true
          files: artifacts/**/*
